import 'dotenv/config';
import express from 'express';
import session from 'express-session';
import passport from 'passport';
import { Strategy as OpenIDConnectStrategy } from 'passport-openidconnect';

const app = express();

// Session
app.use(session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: true,
}));

// Passport setup
passport.use('oidc', new OpenIDConnectStrategy({
    issuer: process.env.OIDC_ISSUER,
    authorizationURL: `${process.env.OIDC_ISSUER}/protocol/openid-connect/auth`,
    tokenURL: `${process.env.OIDC_ISSUER}/protocol/openid-connect/token`,
    userInfoURL: `${process.env.OIDC_ISSUER}/protocol/openid-connect/userinfo`,
    clientID: process.env.OIDC_CLIENT_ID,
    clientSecret: process.env.OIDC_CLIENT_SECRET,
    callbackURL: process.env.OIDC_CALLBACK_URL,
    scope: 'openid profile email',
}, (issuer, sub, profile, accessToken, refreshToken, params, done) => {
    // Ajouter le id_token au profil
    profile.id_token = params.id_token;

    // Vérifie que les informations (nom, email, etc.) sont présentes dans le profil
    console.log('Profil:', profile); // Ajoute cette ligne pour inspecter le profil retourné
    return done(null, profile);
}));

passport.serializeUser((user, done) => done(null, user));
passport.deserializeUser((user, done) => done(null, user));

app.use(passport.initialize());
app.use(passport.session());

// Routes
app.get('/', (req, res) => res.send('Accueil'));

app.get('/login', passport.authenticate('oidc'));

app.get('/login/callback',
    passport.authenticate('oidc', { failureRedirect: '/' }),
    (req, res) => res.redirect('/profile')
);

app.get('/profile', (req, res) => {
    if (!req.isAuthenticated()) {
        return res.redirect('/login');
    }

    // Affiche les informations de l'utilisateur
    const user = req.user;

    res.json({
        nom: user.given_name,    // Prénom
        prenom: user.family_name, // Nom de famille
        email: user.email,       // Email
        idToken: user.id_token   // ID Token si tu veux l'afficher également
    });
});

app.get('/logout', (req, res, next) => {
    const idToken = req.user?.id_token;
    const postLogoutRedirectUri = 'http://localhost:3000/';
    const issuer = process.env.OIDC_ISSUER;

    let logoutURL = `${issuer}/protocol/openid-connect/logout?post_logout_redirect_uri=${encodeURIComponent(postLogoutRedirectUri)}`;

    if (idToken) {
        logoutURL += `&id_token_hint=${encodeURIComponent(idToken)}`;
    }

    req.logout((err) => {
        if (err) return next(err);
        req.session.destroy(() => {
            res.redirect(logoutURL);
        });
    });
});

// Démarrer le serveur
app.listen(3000, () => {
    console.log('Serveur lancé sur http://localhost:3000');
});
